//
//  Day5.swift
//  AdventOfCode2020
//
//  Created by Jake Sawyer on 12/6/20.
//

import Foundation

struct Day5 {
    
    static let boardingPasses: [Int: BoardingPass] = {
        var result = [Int: BoardingPass]()
        for line in rawInput.split(whereSeparator: \.isNewline) {
            let pass = BoardingPass(rawLine: line)
            result[pass.seatID] = pass
        }
        return result
    }()
    
    struct BoardingPass {
        var row: Int
        var column: Int
        
        var seatID: Int { row * 8 + column }
        
        init(rawLine: Substring) {
            let rowCommands = rawLine.prefix(7)
            let columnCommands = rawLine.suffix(3)
            
            func binaryIteration(over string: Substring, max startMax: Int, callback: (Character) -> Bool) -> Int {
                var min = 0
                var max = startMax
//                print("Binary processing \(string)...")
                for index in string.indices {
                    let delta = Int(ceil(Double(max - min) / 2.0))
                    if callback(string[index]) {
//                        print("Chose high, raising min: \(min) + \(delta) -> \(min + delta)")
                        min += delta
                        if index == string.index(before: string.endIndex) {
//                            print("End, chose high: \(max)")
                            return max
                        }
                    } else {
//                        print("Chose low, decreasing max: \(max) - \(delta) -> \(max - delta)")
                        max -= delta
                        if index == string.index(before: string.endIndex) {
//                            print("End, chose low: \(min)")
                            return min
                        }
                    }
//                    print("Current min: \(min), max: \(max)")
                }
                fatalError()
            }
            
            row = binaryIteration(over: rowCommands, max: 127) { value in
                switch value {
                case "F": return false
                case "B": return true
                default: fatalError()
                }
            }
            
            column = binaryIteration(over: columnCommands, max: 7) { value in
                switch value {
                case "L": return false
                case "R": return true
                default: fatalError()
                }
            }
            
//            print("Seat ID: \(seatID)")
        }
    }
    
    static func solvePart1() {
        print("Solving Day 5 Part 1")
//        BoardingPass(rawLine: "BBFFBBFRLL")
//        print("----")
        // As a sanity check, look through your list of boarding passes.
        // What is the highest seat ID on a boarding pass?
        var highest = 0
        for pass in boardingPasses.values {
            if pass.seatID > highest {
                highest = pass.seatID
            }
        }
        print("Highest: \(highest)")
    }
    
    static func solvePart2() {
        for row in 1 ... 126 {
            for seat in 0 ... 7 {
                let id = row * 8 + seat
                if boardingPasses[id] == nil && boardingPasses[id - 1] != nil && boardingPasses[id + 1] != nil {
                    print("Found our seat, id: \(id)")
                }
            }
        }
//        fatalError()
    }
}

// MARK: - Raw Input

extension Day5 {
    
    static let rawInput = """
FBFFFFFLLL
FFBFFFFRRR
FFFBBBBLRL
FBFFBBFLLL
FFFBFBBLLL
FBFFFFBRLR
BFFBBFBLLL
FBFBFFBLLL
BFFFBBBRLL
FBFBBFBRLR
BFBFFFBRLR
FFFBBFFRLR
FFFFFBFRRR
FBFBBBFRRL
FBFBBFBRRR
FBFBBBFLRR
BBFFFBBRLL
FBBBBBFRLL
FBFFFFBLLR
FBFFFFFLRR
FBFBFFBLRR
FBFBFBBRRL
FFFFBFFRRL
FFFFBBFLRR
BFFBBFBRLR
BBFFFFFRLR
FFBFBBBRLL
FFBFBBBLRL
FBFFFBBLLL
FFFFBBFRLR
FBFBBFFLLR
FBBFFBFRLL
BFFFBFBLLR
FBFFBBBLLL
FFFFBBBLRR
FFBFFBFLLL
BFBFBFBRRL
BFBFFFBRRL
FBFBFBFLLL
FBBBBFFRRR
FBFFBFBRRR
BBFFFFFRRL
BFFFFFFLRL
FFFFFBBLLR
FBBFBFBRRL
BFBFFBFLLL
FFFFBBBRLL
BFFFBFBRLL
FFFBBFFLLL
BFFFFFBRLR
FBFBBFFRLR
BFFBBBFRLR
BBFFBFFRRR
BFFBFFFRLL
FFFBBBFLLR
FBFBFFFRRL
FBBFFFBLLR
BFBFFBFLRR
BFFBBFBRRR
FFFBBBBRLR
BBFFBFFRLR
FBBBBBFRRR
FBFBBBFRLR
FBFFFBBLRL
FFBFBFFLRR
BFFFBFFRLL
FBFFBFBLRL
BFBBFBFLLR
BFFFBBFRLL
BFBFBFBLRR
BFFFFBBRLR
BFBBFFBRRL
BFFBFFBRRR
FBFFFBFRLL
FFFFBFFLLR
FBFFFBFLLR
FBFFFFFRRL
FBBBFBBLLR
BFBFFFBLLR
BFFBFFBLLR
FFFBBBFRLL
FBBBBFFRRL
FBBFBBFRRR
BFBFBFFLLR
BFFFBBBRRL
FBBFBBBRRL
FFBFBBFRLL
FBBFBFFLLL
FBBBBBFRLR
BFBFBFFRRL
BFFBBFFRRR
BFBFBFBRLL
BFFBFFBRLR
BBFFBFBLRL
FFBFBFBLLL
FFBBBFBRRR
BBFFFFBLRR
BFBBBBBRLR
BFFFFFBLLR
FBFBBBBRRR
FBBBFBFLRR
FBBFBBFLLL
BBFFFFBLRL
FFBBFBFLLL
FBBBBFBLLR
FFFBBBBRRL
FFBFFBFRLL
BFFBBBFLLR
FFFBFBBLRR
FFBBFFBLLR
FFBFFBFLRR
FBBBBFBLRL
FBBBFBFRLL
FBFBFFFRLL
FBBFBBFRLR
BFFFFBBLLL
FBFBFBFLRL
FBBBFFBRRR
FFFFBFFLLL
BFBBBFFRLL
FBBBFBFLLR
FBBFBBFLRR
FBFFBBBLRL
FBFFBBFLRR
FBBBFFBRRL
FBFBBFBRRL
FBFBBFBLRL
BFBFFBBLLL
FBFFFBFLRR
FBFFBBFRLL
FFBBFFFRLR
FBFBBBBRLL
FBBBBFFRLR
BFBFBFBRLR
BFFBFBFRLR
FFFBFFBLLL
FFFFBBFLLR
FFBFBBFRRL
FBBFBFBRLR
FBFBBFBLRR
BFBBBBFLRL
BFFFFBBRRR
FBBFBFBLLL
BFFFFBFLLR
FFFFFBBLRR
FFFBFBBRRL
BFBFFFFRRR
FBFBBFFLRL
FBFFBBBRLL
FFBBBBFLLR
FFFBFFBLLR
FBFFFFFRLL
BFBFFFBLLL
FBBBBFBRLL
FFFFFFBRRL
FFBFBFBLLR
FBFBFBFRLR
FBBBBBBLLL
BFFBFFBLRL
FFBBBFBLRL
FBBFFFFRLL
BBFFBFBLRR
BFBFFBFLLR
FFBBFBBRLR
FBBFFFFRRL
FBFFBFBRLR
BFBFBFFLLL
FFFBFFFLLL
BFBFBFFLRL
BFBFBBFLLL
FFFBBBBLRR
BFFBFBFLLL
BFBBFBFRRR
BFBBFFFLLL
BFFFBBBLRL
FFBBFBFLRL
FFFFBFBLLR
FBFBFFFLLL
BFBFFFBLRR
FFBBFBBLLR
FFFFBBFLRL
BFBBFBBLLR
BFFBBFBLLR
BFFBFFBRLL
BFFFBBFLLR
FFBBFBFLLR
FBBBFFBRLR
FFBFBFFLLR
FBFFFBBRLR
FBBFFFBRLL
FBBFFBBLRL
BBFFFFBRRL
FFBFFFBRLL
BFFFBFFLRL
FFFFFBBRRR
FBFFBBFRRL
FBFBFBFLRR
FBBFFBFLRR
BFBBFBBLLL
FFFBFBFLRL
BBFFFFBLLR
BBFFBFBLLL
BFBBFBFRRL
FBBFFFBRRL
BFFBBBFLRR
FFBBBBFRRL
FBBBBBBRLR
FFFBFFBRRL
FFFBBFBLRL
FBBBBBBRRL
FFFFBFFRRR
FFFBBBBRLL
FFBBFFBLLL
BFBFBBFRLR
FFBFFBBRLL
BFBBBBFLRR
FBFFBFFLLR
FBBBFFBLLR
BFFBBBBRRR
FFBFFFFLRL
BFFBBFBRLL
FFBFBBBRRL
FFBBBFFRLL
FBBFFBFLLR
FBFFBFFLRR
BBFFFFFLRL
FFBBBBFRLR
BBFFFBBLRR
FFFFFFBRRR
FBBBFBBLRL
BFFBBFBRRL
BFBFBBFRRL
BFBBFBBRLL
BFBFFFBRLL
BFFBFFFLRL
BFFBBBBRLL
FFBBBBBRRL
FBBFFBFRRR
BFBBBBBLRL
BFFFFFBLRL
BBFFFFBRLR
FFBBBBBLRL
BFFBFBFLRL
BFBBFFFLRR
BFFBBBFLRL
BFFBFFFLRR
BFBBFBFLRR
BBFFFFFLLR
FFBFFBBLRL
BFFBBBBLLR
FBFFBBBRLR
BFFFFBBLRR
BFFFBFFRRR
FBBFFBBRLL
FBFBFBFRRL
FFFFBFBRRR
FFBBBFBRLL
FBFFBFBRRL
FFBFBFBLRR
BFFFFFFRLL
BFFBFFBRRL
FBFBFFFLLR
BFBFFBBRLL
FFBFFBBLLR
FBFBBFBLLL
FFBBFBFLRR
FFFBBFBRLL
FBBFFBFLRL
FFBFBFFRRR
FBBBFBBRLL
FBFFFFBLRL
FFFFFFBLRR
BFFBFFFRRL
BFFBFBBLRR
FBBFFFBLRL
FBFFBBFRRR
BBFFFBFLRL
BBFFBFFLRL
FFBBFFFLRR
BFBBBFBLLR
FBFBFBFRLL
BFBFBBFRLL
FFBBFBBRLL
BFBBBFBRRL
BFFFBBFLRR
FFFBFFFRLL
BBFFBFFLRR
BBFFBFFLLR
FFFBFFBLRR
BFFBFFFRRR
FBFBFFFRLR
FBFBFFBLLR
FBBFBFBLRR
FBFBBBBLRL
FBFBBFFRRR
BFFFFBFLRR
FBBFBBBRLL
FFBFFBBLRR
FFBFBFFRLR
FBBBBBBLLR
BFBFFFFLRR
BFFFBBFRRR
FFBFBFFLLL
FFBFBBFRRR
BFFBBBFRLL
BFBBFBFRLL
BFBBBFFRRR
BFFFBBBLRR
FFFBBFBRLR
BBFFFBBLLR
BFFFBBBLLL
FFFBFFBRRR
BFBFBBBLRR
BFBFBFFLRR
FBFBFBBLLL
FBBBFBBLRR
FBFFBBBRRR
FFBFFBBRLR
FFFBBFFRRL
FBBFFBBRLR
BFFBFBBRRL
FBBBFFFLRL
FBBFFFFLLR
FFBBFFBRRR
FFFFFBFLRL
BBFFFFFRLL
BFBBBFFLLL
FBFBBFBRLL
FBFBBBFRLL
FBBBFFFLLR
BFBBFBBLRL
FFFFBBFLLL
BFBBBBBRRR
FFFBFBFRLR
FBFFBFBLLL
BFBBBBBLLR
FFBBFFFRLL
FFFBFFFLRL
FFBBBFFRRL
FFBFFFFRLR
BFFFBBBLLR
BFBFFFFLRL
FBBFFBFRLR
FBFFFFFRLR
BBFFFBBRRL
BBFFFBBLRL
FBFFFBFLRL
FBBFFFFLRR
FBFFFFBLRR
FBFFBFFLRL
BFBFFBFRLL
BFBFBBFRRR
FBBBFBFLLL
BBFFFFFLLL
FFFFBFFLRL
FBBFBBFLRL
FBBFBBBRLR
FFBFFFFLLR
FFBFBFBRRR
FBBBFBBLLL
FBFBBBBLLR
BFFFFBBLRL
BFFBFBFLLR
BFFBBBFRRR
BBFFFBFLRR
FBFFFFFLRL
BFFFFFFRRL
BFFBFFBLLL
BFFFFFFLLL
FFFBFFBLRL
BFFFFBFRRL
FBBBFFFRLR
BFBFBBBLRL
BBFFFBFRRR
BFFFFBBLLR
BFBFBBBRRR
FBFFFBFLLL
FBBBFBFRLR
FFFFFFBLRL
FBFBBFFRRL
BFBBFBFLLL
FFBFFBBRRL
BFBFFFFLLL
FBBFFBFLLL
FBFFFBFRRR
BFBBBBFRRL
BBFFFBFRLL
FBBFBFBLRL
FFBBFFFLRL
FBBFBBFRRL
FBBFBBFLLR
BFBFBFBLLR
FBBFFFFRRR
FBBFFBFRRL
BFFFFFFRRR
BFBBFBBRLR
FFFBFBFRLL
FBFFBBBLLR
BFBBBBBRLL
BFFBFFFRLR
BFBBBFFLRL
BFBBBFFRRL
FFBBFBFRRR
FFBFBBFRLR
FFBFBFFLRL
FBFBFFBLRL
FBBBFFBLRR
BFBBBFFRLR
BBFFBFFRRL
FBBBBBFRRL
FBFBBFFLLL
BFBBFBFRLR
FFBFBFFRRL
BBFFFFFLRR
FBBBFBFRRL
BFBFBBBRLR
FFBFFBFRLR
FFBBFBFRLR
FBFFBFFLLL
BFBFBBBLLL
BFFFFFBRLL
FFBFBBFLRR
BFBBFFFLRL
BFFFFBFLRL
FFBBFBFRRL
FFFFBBFRRR
FBFBFFBRLL
FBBBBFBLRR
BFBBFBBRRL
FFFBFBFRRL
FBFFBFBLLR
FFBFBBBLRR
BBFFFBFLLL
BFBBBBFRLR
FFFFFBFRLL
BBFFFBBRRR
BFFBBFFRLR
FBFBBBFLRL
BFBBFFBLRL
BFBBBFFLRR
FBBBFFFRRR
FFFFBFBLRL
BFFBBBFLLL
FBBBBFBRRL
BFFBFBBRRR
FBBBBBFLLR
BFBFBBBRLL
FFFFFBFLRR
BFFFBBFRRL
FFFBBBFLRL
FBBBBFBLLL
FBBFBBBLLR
FBFBBFBLLR
FBFBFFFLRR
BFFFFBFRLR
FFFBBBBLLL
BFBFFFFRRL
FBFBBBBLRR
FBBBBFFLRL
BFBBBFBLLL
FBBFFFBRRR
FFFBBFFLRL
FBBFFFFLLL
BFFFFBBRLL
FBBBBFBRLR
FFBBBFBLLL
BFFFBFFLLL
BFBBBBBLRR
FFBFFFFLRR
FBBFBFFRLL
BFFBBBFRRL
FFFBFBFLLR
BFFFBFFRRL
FBFBFBBLLR
FBFBBBFRRR
FBBFBFBRLL
BBFFFBBLLL
FBFFBFBRLL
BFBFFBBLLR
FFFBBFFLRR
FBBFBBBLRL
FFFFBFFRLL
FFBBFFFLLL
BFFBBBBLRL
BFBBBFFLLR
FFBBFBFRLL
BFBBBFBLRL
BFBBBFBRLR
BFFBBFFLRL
FFBBBBBRLL
FBBFBFFLRR
FFFBBFBLRR
FBBFFBBRRL
FFFBBFBLLR
FFFBBFBLLL
FBFBFFFRRR
FFFFFFFRRR
BFFFBFFLLR
FFBFFBFLRL
FFFBFFFLRR
FBBFBFFRLR
FBFBFBFLLR
FBFFFBBRRL
FBFFFBBRLL
FFBBFFBLRL
FFFFBFBRRL
FFFFFBFRRL
BFBBFFBLLR
FBFFFBBLRR
FFFFBFFRLR
BFFBBFFLRR
FBBBBBFLLL
BBFFBFFRLL
BFFFFFBRRL
FFFBBBFLLL
FFBBBBBRLR
FFBBBBBLRR
BFFFFFFLRR
FFFBBBFRRR
FFBBBFBRRL
BFBBBFBLRR
FBBFFBBLLR
FFFBFBBRRR
FBFBFBBRRR
FBBFFFBLRR
FFBFFFBLRR
FFBFBBBRLR
FFFBFBFRRR
BFFBFBFRLL
FFFFFBBLRL
FFBBFFFRRL
FFBFBBBRRR
FFBFFBBRRR
FFFFFBBRLL
FFFFBBBLLL
FBFBFFBRRL
FFFBFBFLRR
BFBBFBBRRR
BFFBFBBLLR
BFBFBBBLLR
FBBBBBBRLL
BFFBFBBRLL
FBFFBFFRRR
BFFFBFBRLR
FFBBFBBLRL
BFFFBBFLRL
FFFBBFFRRR
BFFBFFBLRR
FFFFFFBLLR
BFFBFBBRLR
FBFBBBBRRL
BFBBFFFRLL
FBFBBFFLRR
FBBFBBFRLL
FFBBFBBLRR
BFBBFFBRRR
FBBBFBFRRR
FFFFBFBRLR
FFFFFBFRLR
FBBBFFFRRL
FBBFFFFRLR
FFFFBBFRLL
FBBBFBFLRL
BBFFFBFRLR
BFBBFFFLLR
BFFBFBFRRL
FBBBFBBRLR
FBBFBFBRRR
FBFFBBFRLR
FFBBFBBRRL
FBFFFFBLLL
FBFFBBFLLR
BBFFBFBRLR
FBFBBBFLLR
FFFFFFFRRL
FFBFBBBLLL
FFFFBFBLRR
BFFFBFFLRR
FFFFBBBLLR
FFBFBFBRLR
BFFBBFFLLL
BFBBBFBRLL
BBFFFBFLLR
FFFBFBFLLL
FFFFBFFLRR
FFBBBBBLLL
FFFFFBFLLL
FBFBFBBLRR
BFFFFFBLLL
BFBBFFBRLL
FBFBFBBRLR
FBFBFBBLRL
FBBBBBBLRR
FFBFFFBRRL
FBBFBFFLLR
FBBFFBBRRR
BFBBBBFLLR
BFFBBBBRRL
FFFBFFFRRR
BFBFBBFLLR
FFBBFFBLRR
BFFBFFFLLL
FBBFBFBLLR
FFBFFFBLLL
FFFBFFFRRL
FFBFFFFRRL
FFFBBBFRLR
FBFFBBBLRR
FFBBFFBRLR
FFFBBFBRRL
BFFFFFBLRR
BFBFBFFRLR
FFBBFBBLLL
FFFFFBBLLL
FFFFBBBRRL
BFFBFBFLRR
FFBBFFBRLL
FFBFBFBRRL
BFBFFFFLLR
BFFBBBBLRR
FFFBBBBRRR
FFBFBFBLRL
FBFFFBBRRR
FFBFFFFLLL
FFBBBFFRLR
FBFBBBBRLR
FBBBBFFLLR
BFFFBFBRRR
FBBFBBBRRR
FFBFFBFLLR
FFBBBFBLRR
BFBFFFFRLL
BFBBBBBLLL
BFBFFBFRRR
BFFFBFBRRL
FBFBBBFLLL
FFBBBBFLLL
BFFBBFFLLR
BFBFFBFRLR
FBBBBFBRRR
FBFFFBFRRL
FFBBBFBLLR
FBFFBBFLRL
BFFBFBBLLL
FFFFFFBRLR
FBBFBBBLLL
FFFBFFBRLR
BFBBBFBRRR
BFFFFFFRLR
BFFFBBFRLR
FFBBBBFRRR
FFFFFBBRLR
BFBFFBBRRR
FBBFBFFRRR
FFBBBBFLRL
FBBBFBBRRL
FBBBBBBLRL
FBBBBBFLRR
BFBFFBFRRL
FFFFBFBRLL
FBBBBFFRLL
FBBFFFBLLL
BBFFFBFRRL
FFBFFFBLRL
FFFBFFFLLR
FFBFFFBLLR
BFFFBFBLLL
BFBBBBFRRR
BFBBFBBLRR
BFBBFFBLLL
FBFFBFFRRL
FBBFBFFRRL
FFFBBBBLLR
FFBBBFFLLL
BFFBBFBLRR
FBFBFFBRLR
FFBFFFBRRR
FFFFBBBRRR
BFBFFFFRLR
FFBBBFFLLR
FBBBFFFRLL
FBBFFBBLRR
FFBBBFFLRR
FFBFBFBRLL
BFBFBBFLRL
BFBFFBFLRL
FBBBFFFLLL
FFBBBFFLRL
FBFBBBBLLL
FFBBBBFRLL
FBBBFFFLRR
FBFBBFFRLL
BFBFFBBLRL
FBBBFFBLLL
BBFFBFBLLR
FBBBFBBRRR
BBFFFFBRLL
FFFBFBBLLR
BFBFBBBRRL
BBFFFFFRRR
BFFFFFFLLR
FFBFFFFRLL
FBBFFFFLRL
FFFBBBFLRR
FFBFBBFLLR
BFBBFBFLRL
FFBFBBBLLR
BFFFFFBRRR
BFBBBBBRRL
BFFBFFFLLR
BFBBFFFRRL
FFFBFBBLRL
FBBBBBBRRR
FFFFBFBLLL
FFBBBFFRRR
BFFFFBFRRR
FFFFFFBRLL
FFFFFBFLLR
FFBFBBFLRL
BFFFFBBRRL
BFBFBBFLRR
FBFBFBFRRR
FBFFBFFRLL
FFFFBBBRLR
BFBBFFBRLR
BFBFBFFRRR
FFBFFFBRLR
FBBFBBBLRR
FBFFFBBLLR
FFFBBFFLLR
FBBFBFFLRL
BFFFFBFRLL
BFFFBBBRRR
FBFFFFFLLR
FFBBBBBLLR
FBFFFFFRRR
FBFBFBBRLL
BBFFFFBRRR
BFFFBFBLRR
BFFFBFBLRL
BFFFBFFRLR
FFFBFBBRLL
BFBFFFBRRR
FFBFFBFRRR
BFBFBFFRLL
BFBBBBFLLL
FBBFFFBRLR
BBFFBFBRLL
FFBFFBFRRL
BFFBBBBLLL
BFBFFFBLRL
BFBBFFFRLR
FBBBBBFLRL
FFFFBBBLRL
FFFBBFBRRR
BFFBFBFRRR
FBFFFFBRLL
FBFFBBBRRL
FFBFBBFLLL
FFFFBBFRRL
FBFFBFFRLR
BFBFFBBRRL
FFFFFFBLLL
BFBFFBBRLR
FBBBFFBLRL
BFFBBBBRLR
BBFFFFBLLL
FBFFFBFRLR
FBBBBFFLLL
BBFFFBBRLR
FFFBBBFRRL
BFBFBFBLRL
FFFFFBBRRL
BFBFBFBLLL
FFFBFBBRLR
FBBFFBBLLL
FFBBBBBRRR
BFFFBBFLLL
BFBFBFBRRR
BFFBFBBLRL
FFBBFFFLLR
BFFBBFFRRL
BFFBBFBLRL
FBFFFFBRRR
FBBBFFBRLL
FFFBFFFRLR
BFBFFBBLRR
FFBBFBBRRR
FFBBBFBRLR
FFBBFFBRRL
BFBBFFBLRR
FBFBFFBRRR
BFBBFFFRRR
FBBBBFFLRR
BFFFFBFLLL
FBFFFFBRRL
FFFBFFBRLL
BFFFBBBRLR
FBFBFFFLRL
FFBFBFFRLL
FFBBFFFRRR
BFBBBBFRLL
BBFFBFFLLL
FFBBBBFLRR
FFBFFBBLLL
FBFFBFBLRR
FFFBBFFRLL
"""
    
}
